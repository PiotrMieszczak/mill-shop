@use "../../foundations/border/variables" as border;
@use "../../foundations/colors/variables" as color;
@use "../../foundations/mixins" as *;
@use "../../foundations/shadow/variables" as shadow;
@use "../../foundations/space/variables" as space;
@use "../../foundations/typography/variables" as font;
@use "../../foundations/mixins" as mixins;
@use "sass:map";

.lib-button {
  font-family: inherit;
  border: none;
  cursor: pointer;
  border-radius: space.$space-1;
  transition: 0.4s;
  transition-timing-function: ease-in-out;
  width: 100%;
}

$button-variants: (
  primary: (
    bg: color.$primary-5,
    hover-bg: color.$primary-7,
    text: color.$system-negative,
  ),
  secondary: (
    bg: color.$secondary-6,
    hover-bg: color.$secondary-7,
    text: color.$system-negative,
  ),
  success: (
    bg: color.$success,
    text: color.$system-negative,
  ),
  error: (
    bg: color.$error,
    text: color.$system-negative,
  ),
);

@each $type, $values in $button-variants {
  :host([data-type="#{$type}"]) .lib-button {
    background-color: map.get($values, bg);
    color: map.get($values, text);

    @include mixins.border(map.get($values, bg), shadow.$shadow-medium);
  }

  :host([data-type="#{$type}"]) .lib-button:hover {
    border: border.$border-hover;
    background-color: map.get($values, hover-bg);
    box-shadow: shadow.$shadow-strong;
  }
}

$button-sizes: (
  small: (
    padding: space.$space-1 space.$space-2,
    font-size: font.$font-size-1,
  ),
  medium: (
    padding: space.$space-2 space.$space-4,
    font-size: font.$font-size-3,
  ),
  large: (
    padding: space.$space-3 space.$space-5,
    font-size: font.$font-size-5,
  ),
);

@each $size, $values in $button-sizes {
  :host([data-size="#{$size}"]) .lib-button {
    padding: map.get($values, padding);
    font-size: map.get($values, font-size);
  }
}
